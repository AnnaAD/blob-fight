{"ast":null,"code":"var _jsxFileName = \"/Users/anna/Documents/blob-fight/src/CreatureImage.js\";\nimport game_data from \"./game_data.json\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst generator = function () {\n  let {\n    size = 50,\n    growth = 1,\n    edges = 2,\n    seed = null\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var {\n    destPoints,\n    seedValue\n  } = _createPoints(size, growth, edges, seed);\n  var path = _createSvgPath(destPoints);\n  return {\n    path,\n    seedValue\n  };\n};\nconst _toRad = deg => deg * (Math.PI / 180.0);\nconst _divide = count => {\n  var deg = 360 / count;\n  return Array(count).fill(\"a\").map((_, i) => i * deg);\n};\nconst _randomDoubleGenerator = s => {\n  var mask = 0xffffffff;\n  var m_w = 123456789 + s & mask;\n  var m_z = 987654321 - s & mask;\n  return function () {\n    m_z = 36969 * (m_z & 65535) + (m_z >>> 16) & mask;\n    m_w = 18000 * (m_w & 65535) + (m_w >>> 16) & mask;\n    var result = (m_z << 16) + (m_w & 65535) >>> 0;\n    result /= 4294967296;\n    return result;\n  };\n};\nconst _magicPoint = (value, min, max) => {\n  let radius = min + value * (max - min);\n  if (radius > max) {\n    radius = radius - min;\n  } else if (radius < min) {\n    radius = radius + min;\n  }\n  return radius;\n};\nconst _point = (origin, radius, degree) => {\n  var x = origin + radius * Math.cos(_toRad(degree));\n  var y = origin + radius * Math.sin(_toRad(degree));\n  return [Math.round(x), Math.round(y)];\n};\nconst _shuffle = array => {\n  array.sort(() => Math.random() - 0.5);\n  return array;\n};\nconst _createPoints = (size, minGrowth, edgesCount, seed) => {\n  let outerRad = size / 2;\n  let innerRad = minGrowth * (outerRad / 10);\n  let center = size / 2;\n  let slices = _divide(edgesCount);\n  let maxRandomValue = _shuffle([99, 999, 9999, 99999, 999999])[0];\n  let id = Math.floor(Math.random() * maxRandomValue);\n  let seedValue = seed || id;\n  let randVal = _randomDoubleGenerator(seedValue);\n  let destPoints = [];\n  slices.forEach(degree => {\n    let O = _magicPoint(randVal(), innerRad, outerRad);\n    let end = _point(center, O, degree);\n    destPoints.push(end);\n  });\n  return {\n    destPoints,\n    seedValue\n  };\n};\nconst _createSvgPath = points => {\n  let svgPath = \"\";\n  var mid = [(points[0][0] + points[1][0]) / 2, (points[0][1] + points[1][1]) / 2];\n  svgPath += \"M\" + mid[0] + \",\" + mid[1];\n  for (var i = 0; i < points.length; i++) {\n    var p1 = points[(i + 1) % points.length];\n    var p2 = points[(i + 2) % points.length];\n    mid = [(p1[0] + p2[0]) / 2, (p1[1] + p2[1]) / 2];\n    svgPath += \"Q\" + p1[0] + \",\" + p1[1] + \",\" + mid[0] + \",\" + mid[1];\n  }\n  svgPath += \"Z\";\n  return svgPath;\n};\nfunction CreatureImg(props) {\n  console.log(props);\n  console.log(game_data);\n  console.log(game_data.creatures[props.name]);\n  console.log(generator().path);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: \"100px\",\n    height: \"100px\",\n    id: \"sw-js-blob-svg\",\n    viewBox: \"0 0 100 100\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    version: \"1.1\",\n    children: [/*#__PURE__*/_jsxDEV(\"defs\", {\n      children: /*#__PURE__*/_jsxDEV(\"linearGradient\", {\n        id: \"sw-gradient\",\n        x1: \"0\",\n        x2: \"1\",\n        y1: \"1\",\n        y2: \"0\",\n        children: [/*#__PURE__*/_jsxDEV(\"stop\", {\n          id: \"stop1\",\n          stopColor: \"rgba(248, 117, 55, 1)\",\n          offset: \"0%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"stop\", {\n          id: \"stop2\",\n          stopColor: \"rgba(251, 168, 31, 1)\",\n          offset: \"100%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n      fill: \"url(#sw-gradient)\",\n      d: generator().path,\n      transform: \"translate(50 50)\",\n      strokeWidth: \"0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n_c = CreatureImg;\nexport default CreatureImg;\nvar _c;\n$RefreshReg$(_c, \"CreatureImg\");","map":{"version":3,"names":["game_data","generator","size","growth","edges","seed","destPoints","seedValue","_createPoints","path","_createSvgPath","_toRad","deg","Math","PI","_divide","count","Array","fill","map","_","i","_randomDoubleGenerator","s","mask","m_w","m_z","result","_magicPoint","value","min","max","radius","_point","origin","degree","x","cos","y","sin","round","_shuffle","array","sort","random","minGrowth","edgesCount","outerRad","innerRad","center","slices","maxRandomValue","id","floor","randVal","forEach","O","end","push","points","svgPath","mid","length","p1","p2","CreatureImg","props","console","log","creatures","name"],"sources":["/Users/anna/Documents/blob-fight/src/CreatureImage.js"],"sourcesContent":["import game_data from \"./game_data.json\";\nimport './App.css';\n\n\nconst generator = ({ size = 50, growth = 1, edges = 2, seed = null } = {}) => {\n  var { destPoints, seedValue } = _createPoints(size, growth, edges, seed);\n  var path = _createSvgPath(destPoints);\n  return { path, seedValue };\n};\n\nconst _toRad = (deg) => deg * (Math.PI / 180.0);\n\nconst _divide = (count) => {\n  var deg = 360 / count;\n\n  return Array(count)\n    .fill(\"a\")\n    .map((_, i) => i * deg);\n};\n\nconst _randomDoubleGenerator = (s) => {\n  var mask = 0xffffffff;\n  var m_w = (123456789 + s) & mask;\n  var m_z = (987654321 - s) & mask;\n\n  return function () {\n    m_z = (36969 * (m_z & 65535) + (m_z >>> 16)) & mask;\n    m_w = (18000 * (m_w & 65535) + (m_w >>> 16)) & mask;\n\n    var result = ((m_z << 16) + (m_w & 65535)) >>> 0;\n    result /= 4294967296;\n    return result;\n  };\n};\n\nconst _magicPoint = (value, min, max) => {\n  let radius = min + value * (max - min);\n  if (radius > max) {\n    radius = radius - min;\n  } else if (radius < min) {\n    radius = radius + min;\n  }\n  return radius;\n};\n\nconst _point = (origin, radius, degree) => {\n  var x = origin + radius * Math.cos(_toRad(degree));\n  var y = origin + radius * Math.sin(_toRad(degree));\n  return [Math.round(x), Math.round(y)];\n};\n\nconst _shuffle = (array) => {\n  array.sort(() => Math.random() - 0.5);\n  return array;\n};\n\nconst _createPoints = (size, minGrowth, edgesCount, seed) => {\n  let outerRad = size / 2;\n  let innerRad = minGrowth * (outerRad / 10);\n  let center = size / 2;\n\n  let slices = _divide(edgesCount);\n  let maxRandomValue = _shuffle([99, 999, 9999, 99999, 999999])[0];\n  let id = Math.floor(Math.random() * maxRandomValue);\n  let seedValue = seed || id;\n  let randVal = _randomDoubleGenerator(seedValue);\n  let destPoints = [];\n\n  slices.forEach((degree) => {\n    let O = _magicPoint(randVal(), innerRad, outerRad);\n    let end = _point(center, O, degree);\n    destPoints.push(end);\n  });\n  return { destPoints, seedValue };\n};\n\nconst _createSvgPath = (points) => {\n  let svgPath = \"\";\n  var mid = [\n    (points[0][0] + points[1][0]) / 2,\n    (points[0][1] + points[1][1]) / 2,\n  ];\n  svgPath += \"M\" + mid[0] + \",\" + mid[1];\n\n  for (var i = 0; i < points.length; i++) {\n    var p1 = points[(i + 1) % points.length];\n    var p2 = points[(i + 2) % points.length];\n    mid = [(p1[0] + p2[0]) / 2, (p1[1] + p2[1]) / 2];\n    svgPath += \"Q\" + p1[0] + \",\" + p1[1] + \",\" + mid[0] + \",\" + mid[1];\n  }\n  svgPath += \"Z\";\n  return svgPath;\n};\n\n\nfunction CreatureImg(props) {\n\n  console.log(props);\n  console.log(game_data);\n  console.log(game_data.creatures[props.name]);\n\n  console.log(generator().path);\n  return (\n    <svg width = \"100px\" height = \"100px\" id=\"sw-js-blob-svg\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n      <defs>                         \n        <linearGradient id=\"sw-gradient\" x1=\"0\" x2=\"1\" y1=\"1\" y2=\"0\"> \n        <stop id=\"stop1\" stopColor=\"rgba(248, 117, 55, 1)\" offset=\"0%\"></stop>  \n        <stop id=\"stop2\" stopColor=\"rgba(251, 168, 31, 1)\" offset=\"100%\"></stop>\n        </linearGradient>\n      </defs>                \n      <path fill=\"url(#sw-gradient)\" d={generator().path} transform=\"translate(50 50)\" strokeWidth=\"0\"></path>             \n  </svg>\n  );\n}\n\nexport default CreatureImg;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}